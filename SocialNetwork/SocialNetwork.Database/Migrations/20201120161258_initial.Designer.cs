// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialNetwork.Database;

namespace SocialNetwork.Database.Migrations
{
    [DbContext(typeof(SocialNetworkDBContext))]
    [Migration("20201120161258_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442143")
                        },
                        new
                        {
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442143")
                        },
                        new
                        {
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SocialNetwork.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "This is Amazing!",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 737, DateTimeKind.Utc).AddTicks(4953),
                            IsDeleted = false,
                            PostId = 1,
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 2,
                            Content = "This is Awful!",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 737, DateTimeKind.Utc).AddTicks(7951),
                            IsDeleted = false,
                            PostId = 20,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ISO")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ISO = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 2,
                            ISO = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 3,
                            ISO = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 4,
                            ISO = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 5,
                            ISO = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 6,
                            ISO = "UK",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 7,
                            ISO = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 8,
                            ISO = "DE",
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserFriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserFriendId");

                    b.HasIndex("UserId");

                    b.ToTable("Friends");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(5108),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8006),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8074),
                            IsDeleted = false,
                            UserFriendId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8084),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8103),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8112),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8118),
                            IsDeleted = false,
                            UserFriendId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8126),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd")
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8136),
                            IsDeleted = false,
                            UserFriendId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8141),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a")
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8147),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8152),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8158),
                            IsDeleted = false,
                            UserFriendId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8164),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd")
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8169),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 736, DateTimeKind.Utc).AddTicks(8176),
                            IsDeleted = false,
                            UserFriendId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 737, DateTimeKind.Utc).AddTicks(892),
                            IsDeleted = false,
                            ReceiverId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            SenderId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 737, DateTimeKind.Utc).AddTicks(3457),
                            IsDeleted = false,
                            ReceiverId = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            SenderId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 737, DateTimeKind.Utc).AddTicks(3516),
                            IsDeleted = false,
                            ReceiverId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            SenderId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196")
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 737, DateTimeKind.Utc).AddTicks(3527),
                            IsDeleted = false,
                            ReceiverId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            SenderId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6")
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 737, DateTimeKind.Utc).AddTicks(3543),
                            IsDeleted = false,
                            ReceiverId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            SenderId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 737, DateTimeKind.Utc).AddTicks(3549),
                            IsDeleted = false,
                            ReceiverId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            SenderId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196")
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 737, DateTimeKind.Utc).AddTicks(3555),
                            IsDeleted = false,
                            ReceiverId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            SenderId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 740, DateTimeKind.Utc).AddTicks(2585),
                            IsDeleted = false,
                            PostId = 1,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(5447),
                            IsDeleted = false,
                            PostId = 1,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/magi_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(7715),
                            IsDeleted = false,
                            PostId = 2,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/ali_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(7754),
                            IsDeleted = false,
                            PostId = 3,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/telerik_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(7757),
                            IsDeleted = false,
                            PostId = 4,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/viktor_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(7766),
                            IsDeleted = false,
                            PostId = 5,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/silvia_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(7769),
                            IsDeleted = false,
                            PostId = 6,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/alexandra_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(7771),
                            IsDeleted = false,
                            PostId = 7,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(7773),
                            IsDeleted = false,
                            PostId = 8,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/pablo_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(7778),
                            IsDeleted = false,
                            PostId = 9,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(7780),
                            IsDeleted = false,
                            PostId = 10,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(7782),
                            IsDeleted = false,
                            PostId = 11,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(7784),
                            IsDeleted = false,
                            PostId = 12,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(7786),
                            IsDeleted = false,
                            PostId = 13,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(7789),
                            IsDeleted = false,
                            PostId = 14,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(7790),
                            IsDeleted = false,
                            PostId = 15,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId")
                        .IsUnique()
                        .HasFilter("[VideoId] IS NOT NULL");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 738, DateTimeKind.Utc).AddTicks(9148),
                            IsDeleted = false,
                            PhotoId = 1,
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 2,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3083),
                            IsDeleted = false,
                            PhotoId = 2,
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 3,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3152),
                            IsDeleted = false,
                            PhotoId = 3,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 4,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3161),
                            IsDeleted = false,
                            PhotoId = 4,
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 5,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3174),
                            IsDeleted = false,
                            PhotoId = 5,
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 6,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3182),
                            IsDeleted = false,
                            PhotoId = 6,
                            UserId = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 7,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3190),
                            IsDeleted = false,
                            PhotoId = 7,
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 8,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3209),
                            IsDeleted = false,
                            PhotoId = 8,
                            UserId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 9,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3220),
                            IsDeleted = false,
                            PhotoId = 9,
                            UserId = new Guid("d93d2d61-e0ce-4a8d-9d61-93c8bc2849d7"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 10,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3229),
                            IsDeleted = false,
                            PhotoId = 10,
                            UserId = new Guid("5acf2b77-ab0a-4a04-8a5a-9ec38ffab96b"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 11,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3235),
                            IsDeleted = false,
                            PhotoId = 11,
                            UserId = new Guid("6405b148-f626-4142-a342-0ccd2c82c30f"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 12,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3242),
                            IsDeleted = false,
                            PhotoId = 12,
                            UserId = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 13,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3249),
                            IsDeleted = false,
                            PhotoId = 13,
                            UserId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 14,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3254),
                            IsDeleted = false,
                            PhotoId = 14,
                            UserId = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 15,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3260),
                            IsDeleted = false,
                            PhotoId = 15,
                            UserId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 20,
                            Content = "Really funny video :)",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(3266),
                            IsDeleted = false,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            VideoId = 1,
                            Visibility = 0
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442143"),
                            ConcurrencyStamp = "8f52c751-40b0-46c7-818a-9d9033cce3bf",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff"),
                            ConcurrencyStamp = "84809876-c10f-4281-b9c7-7d1de621e4b9",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SocialMedias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 740, DateTimeKind.Utc).AddTicks(6287),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "Instagram",
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserLink = "https://www.instagram.com/magisnikolova"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 740, DateTimeKind.Utc).AddTicks(9952),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "LinkedIn",
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserLink = "https://www.linkedin.com/in/ali-marekov/"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 741, DateTimeKind.Utc).AddTicks(19),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "Official website",
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserLink = "https://www.telerikacademy.com/"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Sofia"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CoverPictureId")
                        .HasColumnType("int");

                    b.Property<string>("CoverPictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfilePictureId")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TownId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4509e53-42e2-4daa-ab72-cd25c8a4d71e",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 600, DateTimeKind.Utc).AddTicks(1911),
                            DateOfBirth = new DateTime(1997, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Magi Nikolova",
                            Education = "Sofia University",
                            Email = "magi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAGI@MAIL.COM",
                            NormalizedUserName = "MAGI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEW1qcgHCBydEIBoUicUyBiXI3hFvoq4eUNt7SH+3BSnyG4uBLT4v/XbrsXQ1w+Hmw==",
                            PhoneNumber = "0886868686",
                            PhoneNumberConfirmed = false,
                            ProfilePictureId = 1,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/magi_profile_pic.jpg",
                            SecurityStamp = "489f9572-daa4-4411-8911-6554922e3a5a",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "magi@mail.com"
                        },
                        new
                        {
                            Id = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30d64ab6-6515-4075-91ec-7b6cbff8c643",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 601, DateTimeKind.Utc).AddTicks(3689),
                            DateOfBirth = new DateTime(1999, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Ali Marekov",
                            Education = "Technical University",
                            Email = "ali@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@MAIL.COM",
                            NormalizedUserName = "ALI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEsBNA/hVU6Hn1p4YR5sAs2gJxf5xHuJwLvM4dW+9wv4/MXrz1alsR5R8GMI09QGIg==",
                            PhoneNumber = "088686843",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/ali_profile_pic.jpg",
                            SecurityStamp = "6bd4dcd7-5ad4-4ef8-b895-6347b9d7cbc1",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "ali@mail.com"
                        },
                        new
                        {
                            Id = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b52f5ca0-c352-4c65-ae7b-8dc495b68630",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 601, DateTimeKind.Utc).AddTicks(3822),
                            DateOfBirth = new DateTime(2010, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Telerik Academy",
                            Education = "Telerik Academy",
                            Email = "telerik@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TELERIK@MAIL.COM",
                            NormalizedUserName = "TELERIK@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE9y/IR5nlTiQRJhTWS1iPSaFDO/qEizHBGbrkj0GkxnA3vEff1PZ21frwynTmRRrQ==",
                            PhoneNumber = "081111111",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/telerik_profile_pic.jpg",
                            SecurityStamp = "3e2a093c-0c1e-4492-80a3-2c38b5110342",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "telerik@mail.com"
                        },
                        new
                        {
                            Id = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8e13a3d-b9af-491f-a048-cd4ea8e30291",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 601, DateTimeKind.Utc).AddTicks(3846),
                            DateOfBirth = new DateTime(2010, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "C Sharp",
                            Education = "Alpha C# Track",
                            Email = "csharp@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CSHARP@MAIL.COM",
                            NormalizedUserName = "CSHARP@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEILNK/piDlvo3BvnCwV3E8Eja8tR1qb5hyLypMI5SZZ3xQtGDPaVcAbNgYBYlNSo9g==",
                            PhoneNumber = "0833333333",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg",
                            SecurityStamp = "3fb56dc9-7f32-4200-acc9-2ac4020306f9",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "csharp@mail.com"
                        },
                        new
                        {
                            Id = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c5723217-9e45-45f6-9746-7dc28160f062",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 601, DateTimeKind.Utc).AddTicks(3865),
                            DateOfBirth = new DateTime(1996, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Viktor Ivanov",
                            Education = "Technical University",
                            Email = "viktor@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTOR@MAIL.COM",
                            NormalizedUserName = "VIKTOR@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKxKQlckVFfEIyer1qEhpSCie5LQ+JA1KX9eQKtSDvC58hGU1n28RS/6s/8U7QroZQ==",
                            PhoneNumber = "0884444444",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/viktor_profile_pic.jpg",
                            SecurityStamp = "696a1e85-d24e-4535-864d-9cbf3ab27945",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "viktor@mail.com"
                        },
                        new
                        {
                            Id = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d224f7bb-00c3-477a-a682-b36d23b20264",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 601, DateTimeKind.Utc).AddTicks(3896),
                            DateOfBirth = new DateTime(2000, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Silvia Borisova",
                            Education = "Sofia University",
                            Email = "silvia@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SILVIA@MAIL.COM",
                            NormalizedUserName = "SILVIA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGsT82U6F4/ZPiJ9gmLxYUg/EbFs1x+C72mDgnM+v7/UOF1eU3SVy9V7+GTEijY8cg==",
                            PhoneNumber = "088555555",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/silvia_profile_pic.jpg",
                            SecurityStamp = "0095ae9e-8927-4e7b-a92d-9e894658da29",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "silvia@mail.com"
                        },
                        new
                        {
                            Id = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8de154d-9dbd-42ce-a0f1-a4c45a2ecd07",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 601, DateTimeKind.Utc).AddTicks(3935),
                            DateOfBirth = new DateTime(1997, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Maria Petrova",
                            Education = "Sofia University",
                            Email = "maria@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA@MAIL.COM",
                            NormalizedUserName = "MARIA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBH7b7p+VWSOgbQiYhd2m9gvpvMSAwMP+S8TM1xFzeBlsapkVbhgPQU3lMy3zseCrQ==",
                            PhoneNumber = "088666666",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg",
                            SecurityStamp = "73e2e9ca-9499-4d55-ab5a-14eaad4f8310",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "maria@mail.com"
                        },
                        new
                        {
                            Id = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a7953c7-d504-4e62-9a65-808e9e0f4ad2",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 601, DateTimeKind.Utc).AddTicks(3953),
                            DateOfBirth = new DateTime(1996, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Pablo Georgiev",
                            Education = "Technical University",
                            Email = "pablo@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PABLO@MAIL.COM",
                            NormalizedUserName = "PABLO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKvLfhifEra/YBEwJmro6Qo/ghKOOzf/mOIabxBJ1zCKg0sUPaufs97g8OBore7nMA==",
                            PhoneNumber = "087777777",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/pablo_profile_pic.jpg",
                            SecurityStamp = "6106d5ec-21bf-472f-ad18-3200b854f69f",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "pablo@mail.com"
                        },
                        new
                        {
                            Id = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "303a4827-ac71-4602-930c-bcee2afc01d8",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 601, DateTimeKind.Utc).AddTicks(3969),
                            DateOfBirth = new DateTime(1976, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Georgi Georgiev",
                            Education = "UNWE",
                            Email = "georgi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGI@MAIL.COM",
                            NormalizedUserName = "GEORGI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAIER93093atBu38ULNG4/+W3MDamorzqznMy2ApVAQELNUns9FC/Fq6/7WBUBbEgA==",
                            PhoneNumber = "0888888888",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg",
                            SecurityStamp = "964127ca-39ef-4dc0-a87b-da85f2353175",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "georgi@mail.com"
                        },
                        new
                        {
                            Id = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c6e8ee7-be8a-4525-ba1c-779fb7d12426",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 601, DateTimeKind.Utc).AddTicks(3988),
                            DateOfBirth = new DateTime(1999, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Alexandra Kirova",
                            Education = "Sofia University",
                            Email = "alexandra@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDRA@MAIL.COM",
                            NormalizedUserName = "ALEXANDRA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKNvwUdZsf7HlGec7N2Bp36CRspN80njYG9VZpegfKq4dNsWSPvDNbXCqjAlnjfG0w==",
                            PhoneNumber = "088899989",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/alexandra_profile_pic.jpg",
                            SecurityStamp = "a78a9503-ed56-4809-a7a4-30fe07bc6472",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "alexandra@mail.com"
                        },
                        new
                        {
                            Id = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "baceff03-fa99-4542-88a9-298966475375",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 601, DateTimeKind.Utc).AddTicks(4011),
                            DateOfBirth = new DateTime(2000, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Stanislav Pulev",
                            Education = "UNWE",
                            Email = "stanisav@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STANISLAV@MAIL.COM",
                            NormalizedUserName = "STANISLAV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENBwMmKzD7k5/W3F/vt2ugdLlNNlKJAiXaWnSKrdsetEMUd+A4/iNFyRN46S6wZYsA==",
                            PhoneNumber = "088679446",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg",
                            SecurityStamp = "0731b724-0c8b-4009-9233-e47a3f624e7c",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "stanislav@mail.com"
                        },
                        new
                        {
                            Id = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d8dd0b5-6a8d-470c-b07c-28e48d71c399",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 601, DateTimeKind.Utc).AddTicks(4032),
                            DateOfBirth = new DateTime(1999, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Nikol Peeva",
                            Education = "Sofia University",
                            Email = "nikol@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOL@MAIL.COM",
                            NormalizedUserName = "NIKOL@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKYBLyhjpqvTZvYIfd97x8M6i97mU7xULvW5xn3Lrnuo5SfN1L0yHgRJ5NKOKza9UA==",
                            PhoneNumber = "08868324",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg",
                            SecurityStamp = "56b56198-3a5b-4225-aa21-77dc3ebf9257",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "nikol@mail.com"
                        },
                        new
                        {
                            Id = new Guid("d93d2d61-e0ce-4a8d-9d61-93c8bc2849d7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "448e02d5-f491-4bda-b788-44e280046c05",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 601, DateTimeKind.Utc).AddTicks(4047),
                            DateOfBirth = new DateTime(1990, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Radko Stanev",
                            Education = "Telerik Academy",
                            Email = "radko@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RADKO@MAIL.COM",
                            NormalizedUserName = "RADKO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMbE+3jD8+nnJfjZig0Pkc5oD96aTPAVhvhh/dAi64Kj5L/0ye+T7IPtp0JrOqRzlg==",
                            PhoneNumber = "545453423",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg",
                            SecurityStamp = "04d7c85e-05ff-4b84-987a-8ed439b5a1e3",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "radko@mail.com"
                        },
                        new
                        {
                            Id = new Guid("5acf2b77-ab0a-4a04-8a5a-9ec38ffab96b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20e7f7cf-4241-4ed4-9ef4-47db1272a247",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 601, DateTimeKind.Utc).AddTicks(4062),
                            DateOfBirth = new DateTime(1990, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Kiro Stanoev",
                            Education = "Telerik Academy",
                            Email = "kiro@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRO@MAIL.COM",
                            NormalizedUserName = "KIRO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGoEQ6qTVnB2hMUJElYWjjY+RSTdpEchThvTVyy+4muSbeFV8JgKloZfeGOTcdf6Cg==",
                            PhoneNumber = "5435345345",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg",
                            SecurityStamp = "c9d01f68-3492-4a53-8167-a48a63283e64",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "kiro@mail.com"
                        },
                        new
                        {
                            Id = new Guid("6405b148-f626-4142-a342-0ccd2c82c30f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57b5d185-3bad-4ae1-81ac-cc6ced70c185",
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 601, DateTimeKind.Utc).AddTicks(4090),
                            DateOfBirth = new DateTime(1990, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Bobi Hadzhiev",
                            Education = "Telerik Academy",
                            Email = "bobi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBI@MAIL.COM",
                            NormalizedUserName = "BOBI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDold/tgpxEqa8ZLZUIFgWpcJsEDkrfHaZUmzc5/xC9hYGfLNVw+NTB6KenCdb6IZw==",
                            PhoneNumber = "653534564",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg",
                            SecurityStamp = "bc0fe243-c610-4b92-a050-a545c109f580",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "bobi@mail.com"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("Videos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 20, 16, 12, 57, 739, DateTimeKind.Utc).AddTicks(9172),
                            IsDeleted = false,
                            PostId = 20,
                            Url = "NONONONO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Comment", b =>
                {
                    b.HasOne("SocialNetwork.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Friend", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "UserFriend")
                        .WithMany("FriendsOf")
                        .HasForeignKey("UserFriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.FriendRequest", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "Receiver")
                        .WithMany("FriendRequestsOf")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "Sender")
                        .WithMany("FriendRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Like", b =>
                {
                    b.HasOne("SocialNetwork.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Post", b =>
                {
                    b.HasOne("SocialNetwork.Models.Photo", "Photo")
                        .WithOne("Post")
                        .HasForeignKey("SocialNetwork.Models.Post", "PhotoId");

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.Video", "Video")
                        .WithOne("Post")
                        .HasForeignKey("SocialNetwork.Models.Post", "VideoId");
                });

            modelBuilder.Entity("SocialNetwork.Models.SocialMedia", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("SocialMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Town", b =>
                {
                    b.HasOne("SocialNetwork.Models.Country", "Country")
                        .WithMany("Towns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.User", b =>
                {
                    b.HasOne("SocialNetwork.Models.Town", "Town")
                        .WithMany("Users")
                        .HasForeignKey("TownId");
                });
#pragma warning restore 612, 618
        }
    }
}
