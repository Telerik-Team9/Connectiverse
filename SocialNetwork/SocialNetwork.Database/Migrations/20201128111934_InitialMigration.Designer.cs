// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialNetwork.Database;

namespace SocialNetwork.Database.Migrations
{
    [DbContext(typeof(SocialNetworkDBContext))]
    [Migration("20201128111934_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442143")
                        },
                        new
                        {
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442143")
                        },
                        new
                        {
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SocialNetwork.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "This is Amazing!",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 744, DateTimeKind.Utc).AddTicks(2732),
                            IsDeleted = false,
                            PostId = 1,
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 2,
                            Content = "This is Awful!",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 744, DateTimeKind.Utc).AddTicks(5076),
                            IsDeleted = false,
                            PostId = 20,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ISO")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ISO = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 2,
                            ISO = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 3,
                            ISO = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 4,
                            ISO = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 5,
                            ISO = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 6,
                            ISO = "UK",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 7,
                            ISO = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 8,
                            ISO = "DE",
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserFriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserFriendId");

                    b.HasIndex("UserId");

                    b.ToTable("Friends");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(4061),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8077),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8119),
                            IsDeleted = false,
                            UserFriendId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8125),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8139),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8144),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8150),
                            IsDeleted = false,
                            UserFriendId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8156),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd")
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8163),
                            IsDeleted = false,
                            UserFriendId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8168),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a")
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8172),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8176),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8181),
                            IsDeleted = false,
                            UserFriendId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8185),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd")
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8191),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(8195),
                            IsDeleted = false,
                            UserFriendId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 743, DateTimeKind.Utc).AddTicks(9861),
                            IsDeleted = false,
                            ReceiverId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            SenderId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 744, DateTimeKind.Utc).AddTicks(1741),
                            IsDeleted = false,
                            ReceiverId = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            SenderId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 744, DateTimeKind.Utc).AddTicks(1781),
                            IsDeleted = false,
                            ReceiverId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            SenderId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196")
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 744, DateTimeKind.Utc).AddTicks(1788),
                            IsDeleted = false,
                            ReceiverId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            SenderId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6")
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 744, DateTimeKind.Utc).AddTicks(1799),
                            IsDeleted = false,
                            ReceiverId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            SenderId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 744, DateTimeKind.Utc).AddTicks(1804),
                            IsDeleted = false,
                            ReceiverId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            SenderId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196")
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 744, DateTimeKind.Utc).AddTicks(1808),
                            IsDeleted = false,
                            ReceiverId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            SenderId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(5212),
                            IsDeleted = false,
                            PostId = 1,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SocialNetwork.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(9953),
                            IsDeleted = false,
                            PostId = 1,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/magi_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(1649),
                            IsDeleted = false,
                            PostId = 2,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/ali_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(1678),
                            IsDeleted = false,
                            PostId = 3,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/telerik_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(1681),
                            IsDeleted = false,
                            PostId = 4,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/viktor_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(1688),
                            IsDeleted = false,
                            PostId = 5,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/silvia_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(1689),
                            IsDeleted = false,
                            PostId = 6,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/alexandra_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(1691),
                            IsDeleted = false,
                            PostId = 7,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(1693),
                            IsDeleted = false,
                            PostId = 8,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/pablo_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(1697),
                            IsDeleted = false,
                            PostId = 9,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(1699),
                            IsDeleted = false,
                            PostId = 10,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(1701),
                            IsDeleted = false,
                            PostId = 11,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(1702),
                            IsDeleted = false,
                            PostId = 12,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(1704),
                            IsDeleted = false,
                            PostId = 13,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(1706),
                            IsDeleted = false,
                            PostId = 14,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(1708),
                            IsDeleted = false,
                            PostId = 15,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId")
                        .IsUnique()
                        .HasFilter("[VideoId] IS NOT NULL");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(5273),
                            IsDeleted = false,
                            PhotoId = 1,
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 2,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8082),
                            IsDeleted = false,
                            PhotoId = 2,
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 3,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8138),
                            IsDeleted = false,
                            PhotoId = 3,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 4,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8144),
                            IsDeleted = false,
                            PhotoId = 4,
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 5,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8155),
                            IsDeleted = false,
                            PhotoId = 5,
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 6,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8161),
                            IsDeleted = false,
                            PhotoId = 6,
                            UserId = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 7,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8168),
                            IsDeleted = false,
                            PhotoId = 7,
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 8,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8173),
                            IsDeleted = false,
                            PhotoId = 8,
                            UserId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 9,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8180),
                            IsDeleted = false,
                            PhotoId = 9,
                            UserId = new Guid("d93d2d61-e0ce-4a8d-9d61-93c8bc2849d7"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 10,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8185),
                            IsDeleted = false,
                            PhotoId = 10,
                            UserId = new Guid("5acf2b77-ab0a-4a04-8a5a-9ec38ffab96b"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 11,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8189),
                            IsDeleted = false,
                            PhotoId = 11,
                            UserId = new Guid("6405b148-f626-4142-a342-0ccd2c82c30f"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 12,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8249),
                            IsDeleted = false,
                            PhotoId = 12,
                            UserId = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 13,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8255),
                            IsDeleted = false,
                            PhotoId = 13,
                            UserId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 14,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8260),
                            IsDeleted = false,
                            PhotoId = 14,
                            UserId = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 15,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8264),
                            IsDeleted = false,
                            PhotoId = 15,
                            UserId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 20,
                            Content = "Really funny video :)",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 745, DateTimeKind.Utc).AddTicks(8268),
                            IsDeleted = false,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            VideoId = 1,
                            Visibility = 0
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442143"),
                            ConcurrencyStamp = "8bc4a4b6-129c-48bd-8bb1-356d6f04a1ad",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff"),
                            ConcurrencyStamp = "7b05903b-2164-42b3-8d44-376efa353838",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SocialMedias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(8514),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "Instagram",
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserLink = "https://www.instagram.com/magisnikolova"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 747, DateTimeKind.Utc).AddTicks(1602),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "LinkedIn",
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserLink = "https://www.linkedin.com/in/ali-marekov/"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 747, DateTimeKind.Utc).AddTicks(1657),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "Official website",
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserLink = "https://www.telerikacademy.com/"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Sofia"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CoverPictureId")
                        .HasColumnType("int");

                    b.Property<string>("CoverPictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfilePictureId")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TownId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f0cd1ae-d351-4b75-822f-fa33358b9569",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 595, DateTimeKind.Utc).AddTicks(3141),
                            DateOfBirth = new DateTime(1997, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Magi Nikolova",
                            Education = "Sofia University",
                            Email = "magi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAGI@MAIL.COM",
                            NormalizedUserName = "MAGI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBEpr8gT89nFH0p0NOo3xnxSexdCdM5ynDuz0Zu/38TdwybE5A3EsdVSmpkGKHlzNw==",
                            PhoneNumber = "0886868686",
                            PhoneNumberConfirmed = false,
                            ProfilePictureId = 1,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/magi_profile_pic.jpg",
                            SecurityStamp = "e6c8cfce-9512-4578-ab23-c278c9a41680",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "magi@mail.com"
                        },
                        new
                        {
                            Id = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65a270a5-0a92-41fa-85ae-58584da3a7a9",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 596, DateTimeKind.Utc).AddTicks(6985),
                            DateOfBirth = new DateTime(1999, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Ali Marekov",
                            Education = "Technical University",
                            Email = "ali@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@MAIL.COM",
                            NormalizedUserName = "ALI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDGBofpMdHoQ28MR1J+TEPnQgnJqpH2RjPa/7renwhi0a6hKEE5Aoz09d9MDknlR9Q==",
                            PhoneNumber = "088686843",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/ali_profile_pic.jpg",
                            SecurityStamp = "a0a5be1d-93a0-41d2-b7d6-b6798da21e2f",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "ali@mail.com"
                        },
                        new
                        {
                            Id = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aeac9789-5611-44ad-834d-a28f937491c1",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 596, DateTimeKind.Utc).AddTicks(7093),
                            DateOfBirth = new DateTime(2010, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Telerik Academy",
                            Education = "Telerik Academy",
                            Email = "telerik@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TELERIK@MAIL.COM",
                            NormalizedUserName = "TELERIK@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHyigcnje+ykOq5WOGj6bfLpllCI+jvYtNbhbrmekrtLol5VaIV5wJ4BaFXJ4jhpWw==",
                            PhoneNumber = "081111111",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/telerik_profile_pic.jpg",
                            SecurityStamp = "303d9580-98b6-4207-96fb-28323392898d",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "telerik@mail.com"
                        },
                        new
                        {
                            Id = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f5a36c7-da96-4563-918c-92e6d46240fc",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 596, DateTimeKind.Utc).AddTicks(7123),
                            DateOfBirth = new DateTime(2010, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "C Sharp",
                            Education = "Alpha C# Track",
                            Email = "csharp@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CSHARP@MAIL.COM",
                            NormalizedUserName = "CSHARP@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBRtXXyo4+FjDc8R24YkQc9/OTC4+P3LRE3cdyfaSW1gTbtrVUjD4YSZcOlAAEUilQ==",
                            PhoneNumber = "0833333333",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "8162527f-00e1-4462-b992-2c5396fac20a",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "csharp@mail.com"
                        },
                        new
                        {
                            Id = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f47ff21-c3df-41b7-953e-9e26f40c61d2",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 596, DateTimeKind.Utc).AddTicks(7210),
                            DateOfBirth = new DateTime(1996, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Viktor Ivanov",
                            Education = "Technical University",
                            Email = "viktor@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTOR@MAIL.COM",
                            NormalizedUserName = "VIKTOR@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENC9Q+HNU1+whue0EHimcoonJWE8PQ2TA3u1mNEipLNDl96UXPtklGX/GO+OuwvvZw==",
                            PhoneNumber = "0884444444",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/viktor_profile_pic.jpg",
                            SecurityStamp = "21e4caac-098c-47f8-a4d2-24be4a5d856b",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "viktor@mail.com"
                        },
                        new
                        {
                            Id = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "889db0d2-b527-4a2a-8767-6317629d4d30",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 596, DateTimeKind.Utc).AddTicks(7229),
                            DateOfBirth = new DateTime(2000, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Silvia Borisova",
                            Education = "Sofia University",
                            Email = "silvia@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SILVIA@MAIL.COM",
                            NormalizedUserName = "SILVIA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHm/M5AOJkSbpKnPaqFH09VdWVVNUYExwKFb9MVIvNBysTHAzukK5o2PW6xif5Lj6Q==",
                            PhoneNumber = "088555555",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/silvia_profile_pic.jpg",
                            SecurityStamp = "ea1bcc70-c3b8-4159-9180-b628643d9888",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "silvia@mail.com"
                        },
                        new
                        {
                            Id = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c27d58ce-2eab-492d-b27d-f197da1c4436",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 596, DateTimeKind.Utc).AddTicks(7243),
                            DateOfBirth = new DateTime(1997, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Maria Petrova",
                            Education = "",
                            Email = "maria@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA@MAIL.COM",
                            NormalizedUserName = "MARIA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC9z7KTcbXK9vD1DCQ73t9/Iso5atLDQCyUMeIRJmQwK+6qihXD5HlTnC/sIhbkRzA==",
                            PhoneNumber = "088666666",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg",
                            SecurityStamp = "d8cf6e76-cafd-4e73-bb8a-7de1a9c6fb58",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "maria@mail.com"
                        },
                        new
                        {
                            Id = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2eb26560-b10c-4d8d-af7f-3c3174dbee5c",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 596, DateTimeKind.Utc).AddTicks(7263),
                            DateOfBirth = new DateTime(1996, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Pablo Georgiev",
                            Education = "Technical University",
                            Email = "pablo@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PABLO@MAIL.COM",
                            NormalizedUserName = "PABLO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMcl+hjQs+NEY+NeSq/Jj0dhCC+wKHALJa55VVpJ/5XyXkLMTsvR7pvdMhR0xaPDBQ==",
                            PhoneNumber = "087777777",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/pablo_profile_pic.jpg",
                            SecurityStamp = "1f60f413-3fc3-4552-883c-057bff642f3d",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "pablo@mail.com"
                        },
                        new
                        {
                            Id = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e9b4b71-9db1-41f4-b74c-9ccc1a46e29f",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 596, DateTimeKind.Utc).AddTicks(7277),
                            DateOfBirth = new DateTime(1976, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Georgi Georgiev",
                            Education = "UNWE",
                            Email = "georgi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGI@MAIL.COM",
                            NormalizedUserName = "GEORGI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMO27WSqWjhBOnQH1cnhtn0FxeWlhWCYFbH1Gu0/XdzQfrmqNGz/+468Tzh5N2+dzQ==",
                            PhoneNumber = "0888888888",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "d3ba063e-c638-408c-9139-25caf7e560c9",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "georgi@mail.com"
                        },
                        new
                        {
                            Id = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22bb6357-4750-4438-a7aa-a1d8f1f3dd6b",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 596, DateTimeKind.Utc).AddTicks(7291),
                            DateOfBirth = new DateTime(1999, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Alexandra Kirova",
                            Education = "Sofia University",
                            Email = "alexandra@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDRA@MAIL.COM",
                            NormalizedUserName = "ALEXANDRA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJO9gpPGehoMxHcN3AZ1M5PA/knuakw6Zis33apz+qtQdXG6C7YGV5qp7bYLSABtkQ==",
                            PhoneNumber = "088899989",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/alexandra_profile_pic.jpg",
                            SecurityStamp = "2cfc8d6d-6b69-41fd-8b9f-730ca1405d84",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "alexandra@mail.com"
                        },
                        new
                        {
                            Id = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0988537c-98f7-46bc-a415-9bd106719af1",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 596, DateTimeKind.Utc).AddTicks(7305),
                            DateOfBirth = new DateTime(2000, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Stanislav Pulev",
                            Education = "UNWE",
                            Email = "stanisav@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STANISLAV@MAIL.COM",
                            NormalizedUserName = "STANISLAV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDbjlij/Yb4eaQpTW+wB1IsnwQYS1c9eR293nbP2OqTN1RosU7qThPtsNkokbCaYjA==",
                            PhoneNumber = "088679446",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "872e60a6-f783-4f22-835c-ec2b2bd9c55f",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "stanislav@mail.com"
                        },
                        new
                        {
                            Id = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b8214a5-d281-4f44-95cf-64fc7ebd34a4",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 596, DateTimeKind.Utc).AddTicks(7321),
                            DateOfBirth = new DateTime(1999, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Nikol Peeva",
                            Education = "",
                            Email = "nikol@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOL@MAIL.COM",
                            NormalizedUserName = "NIKOL@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEApjKMLcoIhaZsyyNddnLNO3lOpZPAsdeg09uWjuWuq9yi68z1/MyPKYl55cqlpGYA==",
                            PhoneNumber = "08868324",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "bb0feffa-8263-42e4-bdd1-d088e3a238bb",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "nikol@mail.com"
                        },
                        new
                        {
                            Id = new Guid("d93d2d61-e0ce-4a8d-9d61-93c8bc2849d7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "518fd08a-2d2b-495d-a5fa-cee6a45f7a35",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 596, DateTimeKind.Utc).AddTicks(7459),
                            DateOfBirth = new DateTime(1990, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Radko Stanev",
                            Education = "Telerik Academy",
                            Email = "radko@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RADKO@MAIL.COM",
                            NormalizedUserName = "RADKO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI3706u+PVV+0d1xsn9jCru+hJgbtxclaAjQh8SeSUHzqN7QqFREF7QmFSVqdzVHSQ==",
                            PhoneNumber = "545453423",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "500dd6d0-7d49-4332-978e-cfd366507d08",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "radko@mail.com"
                        },
                        new
                        {
                            Id = new Guid("5acf2b77-ab0a-4a04-8a5a-9ec38ffab96b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6a8167e-568e-4219-a24e-5ca3bf050ea7",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 596, DateTimeKind.Utc).AddTicks(7473),
                            DateOfBirth = new DateTime(1990, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Kiril Stanoev",
                            Education = "Telerik Academy",
                            Email = "kiro@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRO@MAIL.COM",
                            NormalizedUserName = "KIRO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMnuRSI3U+ZHv+EtoF5oJ5cYtAmUsl483slsONhfipTW29MilJu1bcWxfL5HsdGGXQ==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "bb6daca2-38ba-4f39-8e22-4b4f57213440",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "kiro@mail.com"
                        },
                        new
                        {
                            Id = new Guid("6405b148-f626-4142-a342-0ccd2c82c30f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8a1a669-d5ee-490d-afd4-090e49240fb2",
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 596, DateTimeKind.Utc).AddTicks(7486),
                            DateOfBirth = new DateTime(1990, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Boyan Hadzhiev",
                            Education = "Telerik Academy",
                            Email = "bobi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBI@MAIL.COM",
                            NormalizedUserName = "BOBI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPzzGr21BMisqQU33y5CDyRHcO7vcxyvMdK0IhXcAcOFv64OQcPsYNIc0KhFrsrdEw==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "9441101c-b627-4228-b36f-ccf2a337ccd5",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "bobi@mail.com"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("Videos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 28, 11, 19, 33, 746, DateTimeKind.Utc).AddTicks(2760),
                            IsDeleted = false,
                            PostId = 20,
                            Url = "NONONONO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Comment", b =>
                {
                    b.HasOne("SocialNetwork.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Friend", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "UserFriend")
                        .WithMany("FriendsOf")
                        .HasForeignKey("UserFriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.FriendRequest", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "Receiver")
                        .WithMany("FriendRequestsOf")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "Sender")
                        .WithMany("FriendRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Like", b =>
                {
                    b.HasOne("SocialNetwork.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Message", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Post", b =>
                {
                    b.HasOne("SocialNetwork.Models.Photo", "Photo")
                        .WithOne("Post")
                        .HasForeignKey("SocialNetwork.Models.Post", "PhotoId");

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.Video", "Video")
                        .WithOne("Post")
                        .HasForeignKey("SocialNetwork.Models.Post", "VideoId");
                });

            modelBuilder.Entity("SocialNetwork.Models.SocialMedia", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("SocialMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Town", b =>
                {
                    b.HasOne("SocialNetwork.Models.Country", "Country")
                        .WithMany("Towns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.User", b =>
                {
                    b.HasOne("SocialNetwork.Models.Town", "Town")
                        .WithMany("Users")
                        .HasForeignKey("TownId");
                });
#pragma warning restore 612, 618
        }
    }
}
