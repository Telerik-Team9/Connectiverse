// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialNetwork.Database;

namespace SocialNetwork.Database.Migrations
{
    [DbContext(typeof(SocialNetworkDBContext))]
    [Migration("20201125222943_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442143")
                        },
                        new
                        {
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442143")
                        },
                        new
                        {
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SocialNetwork.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "This is Amazing!",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 4, DateTimeKind.Utc).AddTicks(2447),
                            IsDeleted = false,
                            PostId = 1,
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 2,
                            Content = "This is Awful!",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 4, DateTimeKind.Utc).AddTicks(5685),
                            IsDeleted = false,
                            PostId = 20,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ISO")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ISO = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 2,
                            ISO = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 3,
                            ISO = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 4,
                            ISO = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 5,
                            ISO = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 6,
                            ISO = "UK",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 7,
                            ISO = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 8,
                            ISO = "DE",
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserFriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserFriendId");

                    b.HasIndex("UserId");

                    b.ToTable("Friends");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(4665),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7156),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7203),
                            IsDeleted = false,
                            UserFriendId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7210),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7224),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7230),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7235),
                            IsDeleted = false,
                            UserFriendId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7241),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd")
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7247),
                            IsDeleted = false,
                            UserFriendId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7251),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a")
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7256),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7260),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7266),
                            IsDeleted = false,
                            UserFriendId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7270),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd")
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7274),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(7278),
                            IsDeleted = false,
                            UserFriendId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 3, DateTimeKind.Utc).AddTicks(8864),
                            IsDeleted = false,
                            ReceiverId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            SenderId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 4, DateTimeKind.Utc).AddTicks(984),
                            IsDeleted = false,
                            ReceiverId = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            SenderId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 4, DateTimeKind.Utc).AddTicks(1171),
                            IsDeleted = false,
                            ReceiverId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            SenderId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196")
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 4, DateTimeKind.Utc).AddTicks(1180),
                            IsDeleted = false,
                            ReceiverId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            SenderId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6")
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 4, DateTimeKind.Utc).AddTicks(1193),
                            IsDeleted = false,
                            ReceiverId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            SenderId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 4, DateTimeKind.Utc).AddTicks(1199),
                            IsDeleted = false,
                            ReceiverId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            SenderId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196")
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 4, DateTimeKind.Utc).AddTicks(1204),
                            IsDeleted = false,
                            ReceiverId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            SenderId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(6130),
                            IsDeleted = false,
                            PostId = 1,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SocialNetwork.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(323),
                            IsDeleted = false,
                            PostId = 1,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/magi_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(2122),
                            IsDeleted = false,
                            PostId = 2,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/ali_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(2153),
                            IsDeleted = false,
                            PostId = 3,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/telerik_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(2156),
                            IsDeleted = false,
                            PostId = 4,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/viktor_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(2163),
                            IsDeleted = false,
                            PostId = 5,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/silvia_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(2165),
                            IsDeleted = false,
                            PostId = 6,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/alexandra_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(2167),
                            IsDeleted = false,
                            PostId = 7,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(2168),
                            IsDeleted = false,
                            PostId = 8,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/pablo_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(2172),
                            IsDeleted = false,
                            PostId = 9,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(2174),
                            IsDeleted = false,
                            PostId = 10,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(2176),
                            IsDeleted = false,
                            PostId = 11,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(2178),
                            IsDeleted = false,
                            PostId = 12,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(2180),
                            IsDeleted = false,
                            PostId = 13,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(2182),
                            IsDeleted = false,
                            PostId = 14,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(2184),
                            IsDeleted = false,
                            PostId = 15,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId")
                        .IsUnique()
                        .HasFilter("[VideoId] IS NOT NULL");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(5465),
                            IsDeleted = false,
                            PhotoId = 1,
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 2,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8406),
                            IsDeleted = false,
                            PhotoId = 2,
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 3,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8463),
                            IsDeleted = false,
                            PhotoId = 3,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 4,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8471),
                            IsDeleted = false,
                            PhotoId = 4,
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 5,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8483),
                            IsDeleted = false,
                            PhotoId = 5,
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 6,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8491),
                            IsDeleted = false,
                            PhotoId = 6,
                            UserId = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 7,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8497),
                            IsDeleted = false,
                            PhotoId = 7,
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 8,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8502),
                            IsDeleted = false,
                            PhotoId = 8,
                            UserId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 9,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8509),
                            IsDeleted = false,
                            PhotoId = 9,
                            UserId = new Guid("d93d2d61-e0ce-4a8d-9d61-93c8bc2849d7"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 10,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8515),
                            IsDeleted = false,
                            PhotoId = 10,
                            UserId = new Guid("5acf2b77-ab0a-4a04-8a5a-9ec38ffab96b"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 11,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8519),
                            IsDeleted = false,
                            PhotoId = 11,
                            UserId = new Guid("6405b148-f626-4142-a342-0ccd2c82c30f"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 12,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8527),
                            IsDeleted = false,
                            PhotoId = 12,
                            UserId = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 13,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8532),
                            IsDeleted = false,
                            PhotoId = 13,
                            UserId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 14,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8536),
                            IsDeleted = false,
                            PhotoId = 14,
                            UserId = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 15,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8540),
                            IsDeleted = false,
                            PhotoId = 15,
                            UserId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 20,
                            Content = "Really funny video :)",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 5, DateTimeKind.Utc).AddTicks(8545),
                            IsDeleted = false,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            VideoId = 1,
                            Visibility = 0
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442143"),
                            ConcurrencyStamp = "bdd4ff3d-afc8-47c5-9022-b56b82f622be",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff"),
                            ConcurrencyStamp = "873bd4f1-59a6-424f-b1f7-7a8923a83a13",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SocialMedias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(8733),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "Instagram",
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserLink = "https://www.instagram.com/magisnikolova"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 7, DateTimeKind.Utc).AddTicks(1477),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "LinkedIn",
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserLink = "https://www.linkedin.com/in/ali-marekov/"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 7, DateTimeKind.Utc).AddTicks(1528),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "Official website",
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserLink = "https://www.telerikacademy.com/"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Sofia"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CoverPictureId")
                        .HasColumnType("int");

                    b.Property<string>("CoverPictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfilePictureId")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TownId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c46867ae-4e0c-45fb-9b99-c8928c5211b8",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 862, DateTimeKind.Utc).AddTicks(7539),
                            DateOfBirth = new DateTime(1997, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Magi Nikolova",
                            Education = "Sofia University",
                            Email = "magi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAGI@MAIL.COM",
                            NormalizedUserName = "MAGI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBzg79Jfa11LiFLtiv1IFIiAXaD257vgT6yFVLgKiIlA39BPOEztCsV9gy7sjLRJog==",
                            PhoneNumber = "0886868686",
                            PhoneNumberConfirmed = false,
                            ProfilePictureId = 1,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/magi_profile_pic.jpg",
                            SecurityStamp = "051e624a-fa96-422e-ae13-8c8604b316b3",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "magi@mail.com"
                        },
                        new
                        {
                            Id = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95f3f7e3-bd47-4b29-9ab7-38e3c09bbebe",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 863, DateTimeKind.Utc).AddTicks(7383),
                            DateOfBirth = new DateTime(1999, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Ali Marekov",
                            Education = "Technical University",
                            Email = "ali@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@MAIL.COM",
                            NormalizedUserName = "ALI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOQ2MmuoOIMUu/Q3T1ndBkg5dRecwSvstL4xHN0s/4nw6W1SfJpXpo0SH0jh53pdFA==",
                            PhoneNumber = "088686843",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/ali_profile_pic.jpg",
                            SecurityStamp = "c5073369-abfd-46b1-b667-217440130478",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "ali@mail.com"
                        },
                        new
                        {
                            Id = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29efbe1b-ea80-47f9-89fa-847b2ed90d04",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 863, DateTimeKind.Utc).AddTicks(7507),
                            DateOfBirth = new DateTime(2010, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Telerik Academy",
                            Education = "Telerik Academy",
                            Email = "telerik@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TELERIK@MAIL.COM",
                            NormalizedUserName = "TELERIK@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENPbGnSE6ewcXCx7hgP0Y3sL/uGa+bk4cOgi8NGfoQ8Ez8NxIiQaEldo5HsNbnc0sQ==",
                            PhoneNumber = "081111111",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/telerik_profile_pic.jpg",
                            SecurityStamp = "f8557f08-ff62-4c4b-afe2-5d9afd1775c1",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "telerik@mail.com"
                        },
                        new
                        {
                            Id = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2bb344b-6b25-47b9-8c83-be1c3e3c6fd4",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 863, DateTimeKind.Utc).AddTicks(7524),
                            DateOfBirth = new DateTime(2010, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "C Sharp",
                            Education = "Alpha C# Track",
                            Email = "csharp@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CSHARP@MAIL.COM",
                            NormalizedUserName = "CSHARP@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJZNgVtiff+WfR9ivjEmJTjxGxqybz/jrODnbiVytuSN7wMLF0vA43msuM/7b2ox0A==",
                            PhoneNumber = "0833333333",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "a6ba78e7-814d-47b5-ab6c-319a6884aff9",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "csharp@mail.com"
                        },
                        new
                        {
                            Id = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "410a86d1-9255-49c9-a7a9-f6f81447fe85",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 863, DateTimeKind.Utc).AddTicks(7551),
                            DateOfBirth = new DateTime(1996, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Viktor Ivanov",
                            Education = "Technical University",
                            Email = "viktor@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTOR@MAIL.COM",
                            NormalizedUserName = "VIKTOR@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEColqMDHDe07YguDacliuC5rxb6ZT3IsMVRMkxmNUvn/mieZxs6v9jGb/RNkzfbVNg==",
                            PhoneNumber = "0884444444",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/viktor_profile_pic.jpg",
                            SecurityStamp = "7a230c1c-a654-4411-8799-3ddc763a7d56",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "viktor@mail.com"
                        },
                        new
                        {
                            Id = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d61751fa-701f-4e00-a73a-45f9ab554ddc",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 863, DateTimeKind.Utc).AddTicks(7570),
                            DateOfBirth = new DateTime(2000, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Silvia Borisova",
                            Education = "Sofia University",
                            Email = "silvia@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SILVIA@MAIL.COM",
                            NormalizedUserName = "SILVIA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMfkorcnQ/ETMgDWjGud3JROocyv5sNEEPn7KpOQuXmVRukZ8LezCLpWlV+MNS7Z/A==",
                            PhoneNumber = "088555555",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/silvia_profile_pic.jpg",
                            SecurityStamp = "2c9f37ef-5c19-488c-b315-14a6dece576a",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "silvia@mail.com"
                        },
                        new
                        {
                            Id = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b20d72d3-485d-4bb5-af97-04d84c02b370",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 863, DateTimeKind.Utc).AddTicks(7656),
                            DateOfBirth = new DateTime(1997, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Maria Petrova",
                            Education = "",
                            Email = "maria@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA@MAIL.COM",
                            NormalizedUserName = "MARIA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHHStQIPNQPH5Nby0+guqRIQHjo/MtLDtwcUmoBn4aEWODw6th2C1L4w7dO58IJudA==",
                            PhoneNumber = "088666666",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg",
                            SecurityStamp = "bcf2dbbe-53e5-462a-bdc5-13cec27c6b4a",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "maria@mail.com"
                        },
                        new
                        {
                            Id = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b8bfdce-2541-4338-a46c-4177dbba32a3",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 863, DateTimeKind.Utc).AddTicks(7672),
                            DateOfBirth = new DateTime(1996, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Pablo Georgiev",
                            Education = "Technical University",
                            Email = "pablo@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PABLO@MAIL.COM",
                            NormalizedUserName = "PABLO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIlRXBCX77wWDNSfwuN+RQQb3FesC9RKYYtaPqS/jl44ptvJ0bRmwoK8gkdMK+QvAg==",
                            PhoneNumber = "087777777",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/pablo_profile_pic.jpg",
                            SecurityStamp = "efa0c704-69d7-4bd6-b2a7-fbefc6439e69",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "pablo@mail.com"
                        },
                        new
                        {
                            Id = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29ac0222-312c-4c03-be03-7a2b95ae4903",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 863, DateTimeKind.Utc).AddTicks(7690),
                            DateOfBirth = new DateTime(1976, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Georgi Georgiev",
                            Education = "UNWE",
                            Email = "georgi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGI@MAIL.COM",
                            NormalizedUserName = "GEORGI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELwe3ggR/D9KsIsh5FOP1HvW9CAaTGFjMQZ4gvUCnsy0tJovtMA+YlmUFNCKENI4jA==",
                            PhoneNumber = "0888888888",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "73e7d492-d963-43d4-a7fd-ef31fcd13d06",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "georgi@mail.com"
                        },
                        new
                        {
                            Id = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00027d21-68be-4930-bf35-e96a0fcdf408",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 863, DateTimeKind.Utc).AddTicks(7705),
                            DateOfBirth = new DateTime(1999, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Alexandra Kirova",
                            Education = "Sofia University",
                            Email = "alexandra@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDRA@MAIL.COM",
                            NormalizedUserName = "ALEXANDRA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGtJ/a4CzTsIv0lbl55PmLlCxSJK04GEItOBDIIzNu7THnSECQ06+6O4ZKX51uJ2CA==",
                            PhoneNumber = "088899989",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/alexandra_profile_pic.jpg",
                            SecurityStamp = "37ca68e0-1d82-4568-8c49-b0ced312fc6c",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "alexandra@mail.com"
                        },
                        new
                        {
                            Id = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6948f9d5-3229-4df6-834f-ebcbd5a87b6d",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 863, DateTimeKind.Utc).AddTicks(7720),
                            DateOfBirth = new DateTime(2000, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Stanislav Pulev",
                            Education = "UNWE",
                            Email = "stanisav@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STANISLAV@MAIL.COM",
                            NormalizedUserName = "STANISLAV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECSKVFGd98yQIQwF4ljLEXQgK/ff75Q+Q9wj77PHySIYziDfsUlTN7u9V8haMNMaMQ==",
                            PhoneNumber = "088679446",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "7d25b343-f7da-4439-b501-43701472d057",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "stanislav@mail.com"
                        },
                        new
                        {
                            Id = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cd0a1d5-27f2-4ab9-b158-8fe69587b7a1",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 863, DateTimeKind.Utc).AddTicks(7733),
                            DateOfBirth = new DateTime(1999, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Nikol Peeva",
                            Education = "",
                            Email = "nikol@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOL@MAIL.COM",
                            NormalizedUserName = "NIKOL@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBskvGkekxDu9BXEmW1iKH88UfcW66Fn6lkPhQ0EUNCYQyvgFIqChlC8DjJ6KcC5Cg==",
                            PhoneNumber = "08868324",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "1fb3d35e-e1ac-4915-8334-378638fdc816",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "nikol@mail.com"
                        },
                        new
                        {
                            Id = new Guid("d93d2d61-e0ce-4a8d-9d61-93c8bc2849d7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5449db4a-d3ca-4e20-a6de-587c7f8c64fd",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 863, DateTimeKind.Utc).AddTicks(7750),
                            DateOfBirth = new DateTime(1990, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Radko Stanev",
                            Education = "Telerik Academy",
                            Email = "radko@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RADKO@MAIL.COM",
                            NormalizedUserName = "RADKO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHsUkfBTwNA2PA8XUAmFxMFLpeoNIfHjzn4+VVm8Nzl9rS+r5toZ//l3pWSGHjJv9w==",
                            PhoneNumber = "545453423",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "c75b5796-f820-4970-8554-09beda22c644",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "radko@mail.com"
                        },
                        new
                        {
                            Id = new Guid("5acf2b77-ab0a-4a04-8a5a-9ec38ffab96b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95dff916-38de-4b42-a979-7758617a6f2f",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 863, DateTimeKind.Utc).AddTicks(7858),
                            DateOfBirth = new DateTime(1990, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Kiril Stanoev",
                            Education = "Telerik Academy",
                            Email = "kiro@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRO@MAIL.COM",
                            NormalizedUserName = "KIRO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECFdUO/gszsiUxcj1Lmk6QvTsZjLLBOlnsNnQGkKbVNSZEvrz9WDuiMmxSL1mIYS/w==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "44ccb45a-b0a1-4ea2-9f96-a2223d44e931",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "kiro@mail.com"
                        },
                        new
                        {
                            Id = new Guid("6405b148-f626-4142-a342-0ccd2c82c30f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "796ef82d-6c1c-402d-84c9-677ec41c1ec2",
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 42, 863, DateTimeKind.Utc).AddTicks(7875),
                            DateOfBirth = new DateTime(1990, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Boyan Hadzhiev",
                            Education = "Telerik Academy",
                            Email = "bobi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBI@MAIL.COM",
                            NormalizedUserName = "BOBI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC8u6XMQGYrurwzw6bX0923Lq3YDAJecjkrrWg3kRvjOToTpj65jPgfT+4vwJ/1P2w==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "02f980d7-ac08-4d25-84f5-3390b8ba8611",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "bobi@mail.com"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("Videos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 25, 22, 29, 43, 6, DateTimeKind.Utc).AddTicks(3265),
                            IsDeleted = false,
                            PostId = 20,
                            Url = "NONONONO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Comment", b =>
                {
                    b.HasOne("SocialNetwork.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Friend", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "UserFriend")
                        .WithMany("FriendsOf")
                        .HasForeignKey("UserFriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.FriendRequest", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "Receiver")
                        .WithMany("FriendRequestsOf")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "Sender")
                        .WithMany("FriendRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Like", b =>
                {
                    b.HasOne("SocialNetwork.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Message", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Post", b =>
                {
                    b.HasOne("SocialNetwork.Models.Photo", "Photo")
                        .WithOne("Post")
                        .HasForeignKey("SocialNetwork.Models.Post", "PhotoId");

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.Video", "Video")
                        .WithOne("Post")
                        .HasForeignKey("SocialNetwork.Models.Post", "VideoId");
                });

            modelBuilder.Entity("SocialNetwork.Models.SocialMedia", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("SocialMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Town", b =>
                {
                    b.HasOne("SocialNetwork.Models.Country", "Country")
                        .WithMany("Towns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.User", b =>
                {
                    b.HasOne("SocialNetwork.Models.Town", "Town")
                        .WithMany("Users")
                        .HasForeignKey("TownId");
                });
#pragma warning restore 612, 618
        }
    }
}
