// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialNetwork.Database;

namespace SocialNetwork.Database.Migrations
{
    [DbContext(typeof(SocialNetworkDBContext))]
    [Migration("20201121110206_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442143")
                        },
                        new
                        {
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442143")
                        },
                        new
                        {
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SocialNetwork.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "This is Amazing!",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 250, DateTimeKind.Utc).AddTicks(9850),
                            IsDeleted = false,
                            PostId = 1,
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 2,
                            Content = "This is Awful!",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 251, DateTimeKind.Utc).AddTicks(4989),
                            IsDeleted = false,
                            PostId = 20,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ISO")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ISO = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 2,
                            ISO = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 3,
                            ISO = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 4,
                            ISO = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 5,
                            ISO = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 6,
                            ISO = "UK",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 7,
                            ISO = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 8,
                            ISO = "DE",
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserFriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserFriendId");

                    b.HasIndex("UserId");

                    b.ToTable("Friends");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(4486),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(6776),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(7111),
                            IsDeleted = false,
                            UserFriendId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(7119),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(7303),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(7310),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(7316),
                            IsDeleted = false,
                            UserFriendId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(7325),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd")
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(7332),
                            IsDeleted = false,
                            UserFriendId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(7337),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a")
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(7342),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(7348),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(7370),
                            IsDeleted = false,
                            UserFriendId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(7375),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd")
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(7379),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 249, DateTimeKind.Utc).AddTicks(7384),
                            IsDeleted = false,
                            UserFriendId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 250, DateTimeKind.Utc).AddTicks(1192),
                            IsDeleted = false,
                            ReceiverId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            SenderId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 250, DateTimeKind.Utc).AddTicks(7069),
                            IsDeleted = false,
                            ReceiverId = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            SenderId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 250, DateTimeKind.Utc).AddTicks(7252),
                            IsDeleted = false,
                            ReceiverId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            SenderId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196")
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 250, DateTimeKind.Utc).AddTicks(7259),
                            IsDeleted = false,
                            ReceiverId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            SenderId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6")
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 250, DateTimeKind.Utc).AddTicks(7270),
                            IsDeleted = false,
                            ReceiverId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            SenderId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 250, DateTimeKind.Utc).AddTicks(7275),
                            IsDeleted = false,
                            ReceiverId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            SenderId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196")
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 250, DateTimeKind.Utc).AddTicks(7279),
                            IsDeleted = false,
                            ReceiverId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            SenderId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(8764),
                            IsDeleted = false,
                            PostId = 1,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(1356),
                            IsDeleted = false,
                            PostId = 1,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/magi_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(3108),
                            IsDeleted = false,
                            PostId = 2,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/ali_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(3140),
                            IsDeleted = false,
                            PostId = 3,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/telerik_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(3142),
                            IsDeleted = false,
                            PostId = 4,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/viktor_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(3150),
                            IsDeleted = false,
                            PostId = 5,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/silvia_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(3152),
                            IsDeleted = false,
                            PostId = 6,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/alexandra_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(3154),
                            IsDeleted = false,
                            PostId = 7,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(3156),
                            IsDeleted = false,
                            PostId = 8,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/pablo_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(3216),
                            IsDeleted = false,
                            PostId = 9,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(3219),
                            IsDeleted = false,
                            PostId = 10,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(3220),
                            IsDeleted = false,
                            PostId = 11,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(3222),
                            IsDeleted = false,
                            PostId = 12,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(3224),
                            IsDeleted = false,
                            PostId = 13,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(3226),
                            IsDeleted = false,
                            PostId = 14,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(3228),
                            IsDeleted = false,
                            PostId = 15,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId")
                        .IsUnique()
                        .HasFilter("[VideoId] IS NOT NULL");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(6427),
                            IsDeleted = false,
                            PhotoId = 1,
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 2,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9483),
                            IsDeleted = false,
                            PhotoId = 2,
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 3,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9545),
                            IsDeleted = false,
                            PhotoId = 3,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 4,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9554),
                            IsDeleted = false,
                            PhotoId = 4,
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 5,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9566),
                            IsDeleted = false,
                            PhotoId = 5,
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 6,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9572),
                            IsDeleted = false,
                            PhotoId = 6,
                            UserId = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 7,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9578),
                            IsDeleted = false,
                            PhotoId = 7,
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 8,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9582),
                            IsDeleted = false,
                            PhotoId = 8,
                            UserId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 9,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9589),
                            IsDeleted = false,
                            PhotoId = 9,
                            UserId = new Guid("d93d2d61-e0ce-4a8d-9d61-93c8bc2849d7"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 10,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9594),
                            IsDeleted = false,
                            PhotoId = 10,
                            UserId = new Guid("5acf2b77-ab0a-4a04-8a5a-9ec38ffab96b"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 11,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9599),
                            IsDeleted = false,
                            PhotoId = 11,
                            UserId = new Guid("6405b148-f626-4142-a342-0ccd2c82c30f"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 12,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9603),
                            IsDeleted = false,
                            PhotoId = 12,
                            UserId = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 13,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9608),
                            IsDeleted = false,
                            PhotoId = 13,
                            UserId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 14,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9612),
                            IsDeleted = false,
                            PhotoId = 14,
                            UserId = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 15,
                            Content = "My new profile photo",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9617),
                            IsDeleted = false,
                            PhotoId = 15,
                            UserId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 20,
                            Content = "Really funny video :)",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 252, DateTimeKind.Utc).AddTicks(9621),
                            IsDeleted = false,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            VideoId = 1,
                            Visibility = 0
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442143"),
                            ConcurrencyStamp = "159af138-2f80-4bdd-876c-bb3be477a6c7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff"),
                            ConcurrencyStamp = "aeef557e-fc26-4c6a-9763-de424f916f30",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SocialMedias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 254, DateTimeKind.Utc).AddTicks(1398),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "Instagram",
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserLink = "https://www.instagram.com/magisnikolova"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 254, DateTimeKind.Utc).AddTicks(4460),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "LinkedIn",
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserLink = "https://www.linkedin.com/in/ali-marekov/"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 254, DateTimeKind.Utc).AddTicks(4512),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "Official website",
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserLink = "https://www.telerikacademy.com/"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Sofia"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CoverPictureId")
                        .HasColumnType("int");

                    b.Property<string>("CoverPictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfilePictureId")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TownId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "588579b4-e483-4f7b-bdae-0cd90348c4d6",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 108, DateTimeKind.Utc).AddTicks(5326),
                            DateOfBirth = new DateTime(1997, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Magi Nikolova",
                            Education = "Sofia University",
                            Email = "magi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAGI@MAIL.COM",
                            NormalizedUserName = "MAGI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJRTaoDcT4SiCuylO5MDLW+hIUiVMCYIL1XgmnrCOtQtRZkL4qG0+v82wkay0y7BHQ==",
                            PhoneNumber = "0886868686",
                            PhoneNumberConfirmed = false,
                            ProfilePictureId = 1,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/magi_profile_pic.jpg",
                            SecurityStamp = "0246ef72-8748-474b-bb81-9621d9f61f0b",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "magi@mail.com"
                        },
                        new
                        {
                            Id = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c4f9d40-ddeb-491a-aee9-29c1b2f96fa6",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 109, DateTimeKind.Utc).AddTicks(4228),
                            DateOfBirth = new DateTime(1999, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Ali Marekov",
                            Education = "Technical University",
                            Email = "ali@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@MAIL.COM",
                            NormalizedUserName = "ALI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ61kNaonDxiRE97dF25ntoOCHf5ZRrZOA7s+4lrT9NYX1tK8+Rh31iBCkiqef7IJQ==",
                            PhoneNumber = "088686843",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/ali_profile_pic.jpg",
                            SecurityStamp = "0f5c4e95-e299-447c-8968-d0545d029df3",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "ali@mail.com"
                        },
                        new
                        {
                            Id = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d2e53df-ee98-4dbf-9daf-68a985e14215",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 109, DateTimeKind.Utc).AddTicks(4308),
                            DateOfBirth = new DateTime(2010, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Telerik Academy",
                            Education = "Telerik Academy",
                            Email = "telerik@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TELERIK@MAIL.COM",
                            NormalizedUserName = "TELERIK@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENFjSE6iVD/DR4z/dvCEgSf1FtGtJ0mEuX5R8az/G4o5NMSI+olcSVDDKMpPLZRdnw==",
                            PhoneNumber = "081111111",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/telerik_profile_pic.jpg",
                            SecurityStamp = "0e58c2f7-c2c7-483c-8f14-40b55cd76ddf",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "telerik@mail.com"
                        },
                        new
                        {
                            Id = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "041cdb19-d75e-43d4-8e16-25675b4511ff",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 109, DateTimeKind.Utc).AddTicks(4337),
                            DateOfBirth = new DateTime(2010, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "C Sharp",
                            Education = "Alpha C# Track",
                            Email = "csharp@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CSHARP@MAIL.COM",
                            NormalizedUserName = "CSHARP@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA7ys5EpD2KgfwZs0vfkrjngHYZ5FmhwXigR0kARwG/RboDX8LE9Vx92TBhISGcG8A==",
                            PhoneNumber = "0833333333",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "6a522b16-3e98-40b7-af11-ccfb5ad8f6ae",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "csharp@mail.com"
                        },
                        new
                        {
                            Id = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3931a57f-3c64-4958-841a-49235a9046ec",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 109, DateTimeKind.Utc).AddTicks(4354),
                            DateOfBirth = new DateTime(1996, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Viktor Ivanov",
                            Education = "Technical University",
                            Email = "viktor@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTOR@MAIL.COM",
                            NormalizedUserName = "VIKTOR@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIGlWpkDIiiEjYhuJl74uwN9rA3UvyfKIKAuRcyVCN69xCL0hU06as2opxiR8HTJ2A==",
                            PhoneNumber = "0884444444",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/viktor_profile_pic.jpg",
                            SecurityStamp = "8b433c1d-d5d8-4f21-ba02-df8577ef5b23",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "viktor@mail.com"
                        },
                        new
                        {
                            Id = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c92a717-f54b-4e0e-b345-6c905439d8f3",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 109, DateTimeKind.Utc).AddTicks(4373),
                            DateOfBirth = new DateTime(2000, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Silvia Borisova",
                            Education = "Sofia University",
                            Email = "silvia@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SILVIA@MAIL.COM",
                            NormalizedUserName = "SILVIA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIe1TpdLM/vsKAhKZjABpmtQjiVCxH28+6Z7OttjkpkKsJz2vGqf4sMSEqZkwHrUAw==",
                            PhoneNumber = "088555555",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/silvia_profile_pic.jpg",
                            SecurityStamp = "a95ee6c0-8e1b-49d9-adc8-2798d07c40a4",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "silvia@mail.com"
                        },
                        new
                        {
                            Id = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21cb0055-8ac5-4761-aab4-1bf623565043",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 109, DateTimeKind.Utc).AddTicks(4389),
                            DateOfBirth = new DateTime(1997, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Maria Petrova",
                            Education = "",
                            Email = "maria@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA@MAIL.COM",
                            NormalizedUserName = "MARIA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMGaDVFXXSeZXBTi37HGW3IdP5IOCiBmHpea02HW/+3HHZq4Awy2lPI+oriGuEiHHQ==",
                            PhoneNumber = "088666666",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg",
                            SecurityStamp = "920911d6-1405-4283-8d5e-261debfb6e9a",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "maria@mail.com"
                        },
                        new
                        {
                            Id = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8c791dc-5c20-4b59-b5ce-9ad09106c524",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 109, DateTimeKind.Utc).AddTicks(4464),
                            DateOfBirth = new DateTime(1996, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Pablo Georgiev",
                            Education = "Technical University",
                            Email = "pablo@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PABLO@MAIL.COM",
                            NormalizedUserName = "PABLO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDTvzPG/vnN737Ld4T/GGk55lPp+/c0At0Y4rPirV7U5LkzAXdCWj3wFatW2eiKqGQ==",
                            PhoneNumber = "087777777",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/pablo_profile_pic.jpg",
                            SecurityStamp = "fb3f2fd1-0dd6-4450-9403-e6f1152a6b76",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "pablo@mail.com"
                        },
                        new
                        {
                            Id = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aef4849a-60eb-43f5-ad64-2f18725e62a1",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 109, DateTimeKind.Utc).AddTicks(4483),
                            DateOfBirth = new DateTime(1976, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Georgi Georgiev",
                            Education = "UNWE",
                            Email = "georgi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGI@MAIL.COM",
                            NormalizedUserName = "GEORGI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL6SWn6LGQFShq9p8WByU7o4eVl3u2YEfzuLQVUctMyFVfhGDMk+o6jm9KtgGbA6KA==",
                            PhoneNumber = "0888888888",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "99bebeb8-4391-4aa5-98eb-6b829443e8ab",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "georgi@mail.com"
                        },
                        new
                        {
                            Id = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "acb777f0-169e-4961-b1da-0024a3a07d7a",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 109, DateTimeKind.Utc).AddTicks(4499),
                            DateOfBirth = new DateTime(1999, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Alexandra Kirova",
                            Education = "Sofia University",
                            Email = "alexandra@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDRA@MAIL.COM",
                            NormalizedUserName = "ALEXANDRA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB2jzP3SIncEL8tpclpClRl5T9uEdgvAHoyy5DwOX1WeI3k9u07FURzUJcNvrwhAcA==",
                            PhoneNumber = "088899989",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/alexandra_profile_pic.jpg",
                            SecurityStamp = "aab8f4a9-6012-40d1-9b82-68d0db2a2199",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "alexandra@mail.com"
                        },
                        new
                        {
                            Id = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdf30ad1-a270-46ee-a662-32fe2b73851b",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 109, DateTimeKind.Utc).AddTicks(4516),
                            DateOfBirth = new DateTime(2000, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Stanislav Pulev",
                            Education = "UNWE",
                            Email = "stanisav@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STANISLAV@MAIL.COM",
                            NormalizedUserName = "STANISLAV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENGRIZqHb1GrNJGXYA21nt/8BC5OzSVa/W9wENsGxAkZ3UIu/FKift3msOqonVP7OA==",
                            PhoneNumber = "088679446",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "1f0e006b-6e64-49da-b1fb-575a9bf91104",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "stanislav@mail.com"
                        },
                        new
                        {
                            Id = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24f58e9d-d751-4b62-8a8d-f1ab21d10466",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 109, DateTimeKind.Utc).AddTicks(4534),
                            DateOfBirth = new DateTime(1999, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Nikol Peeva",
                            Education = "",
                            Email = "nikol@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOL@MAIL.COM",
                            NormalizedUserName = "NIKOL@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDb4NfMgecf1GR6lahfiEumP1c23gDk14ItRwy30QJP5l7mFWKhMq7PWPmknUOw1Nw==",
                            PhoneNumber = "08868324",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "53f45749-1edc-4795-b02a-da99db4b1f0a",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "nikol@mail.com"
                        },
                        new
                        {
                            Id = new Guid("d93d2d61-e0ce-4a8d-9d61-93c8bc2849d7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3eecb194-bb0a-4313-a86c-1e9bf3e66834",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 109, DateTimeKind.Utc).AddTicks(4549),
                            DateOfBirth = new DateTime(1990, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Radko Stanev",
                            Education = "Telerik Academy",
                            Email = "radko@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RADKO@MAIL.COM",
                            NormalizedUserName = "RADKO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED9Rpm3tQrP3yYdxcckYTJAywbvonDZy/BUEGD9nGUEcbA+20Kj7CB86T4lGbnpA0g==",
                            PhoneNumber = "545453423",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "b3c87d84-2227-4475-9d9f-0ee81f8d7a26",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "radko@mail.com"
                        },
                        new
                        {
                            Id = new Guid("5acf2b77-ab0a-4a04-8a5a-9ec38ffab96b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "baa9c014-0b24-4b7b-8530-a0f3219a2725",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 109, DateTimeKind.Utc).AddTicks(4563),
                            DateOfBirth = new DateTime(1990, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Kiril Stanoev",
                            Education = "Telerik Academy",
                            Email = "kiro@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRO@MAIL.COM",
                            NormalizedUserName = "KIRO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPmN/D9pGkJJn1NJoK4gZXpdlXi5vslb1MP0e3Wie2rfeat0lo9ljRruGuO0xByczw==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "4285999f-2e39-4ccf-9aa8-90a2e2062556",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "kiro@mail.com"
                        },
                        new
                        {
                            Id = new Guid("6405b148-f626-4142-a342-0ccd2c82c30f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3056bfd9-f1af-4ab5-b48e-9a3478b288bf",
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 109, DateTimeKind.Utc).AddTicks(4578),
                            DateOfBirth = new DateTime(1990, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Boyan Hadzhiev",
                            Education = "Telerik Academy",
                            Email = "bobi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBI@MAIL.COM",
                            NormalizedUserName = "BOBI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDnVVt4dMzVaD7Eze2dOxFc42y8JmCxX0dfmPmETif/utSbjmfkyK8O1R9ek9ZjGBw==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "/img/noavatar.jpg",
                            SecurityStamp = "56eae242-382b-4870-a05c-25004cc4f656",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "bobi@mail.com"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("Videos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 21, 11, 2, 5, 253, DateTimeKind.Utc).AddTicks(5302),
                            IsDeleted = false,
                            PostId = 20,
                            Url = "NONONONO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Comment", b =>
                {
                    b.HasOne("SocialNetwork.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Friend", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "UserFriend")
                        .WithMany("FriendsOf")
                        .HasForeignKey("UserFriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.FriendRequest", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "Receiver")
                        .WithMany("FriendRequestsOf")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "Sender")
                        .WithMany("FriendRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Like", b =>
                {
                    b.HasOne("SocialNetwork.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Post", b =>
                {
                    b.HasOne("SocialNetwork.Models.Photo", "Photo")
                        .WithOne("Post")
                        .HasForeignKey("SocialNetwork.Models.Post", "PhotoId");

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.Video", "Video")
                        .WithOne("Post")
                        .HasForeignKey("SocialNetwork.Models.Post", "VideoId");
                });

            modelBuilder.Entity("SocialNetwork.Models.SocialMedia", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("SocialMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Town", b =>
                {
                    b.HasOne("SocialNetwork.Models.Country", "Country")
                        .WithMany("Towns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.User", b =>
                {
                    b.HasOne("SocialNetwork.Models.Town", "Town")
                        .WithMany("Users")
                        .HasForeignKey("TownId");
                });
#pragma warning restore 612, 618
        }
    }
}
