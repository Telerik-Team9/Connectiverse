// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialNetwork.Database;

namespace SocialNetwork.Database.Migrations
{
    [DbContext(typeof(SocialNetworkDBContext))]
    partial class SocialNetworkDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442143")
                        },
                        new
                        {
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442143")
                        },
                        new
                        {
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        },
                        new
                        {
                            UserId = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            RoleId = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SocialNetwork.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "This is Amazing!",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 973, DateTimeKind.Utc).AddTicks(6252),
                            IsDeleted = false,
                            PostId = 1,
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 2,
                            Content = "This is Awful!",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 973, DateTimeKind.Utc).AddTicks(9265),
                            IsDeleted = false,
                            PostId = 20,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ISO")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ISO = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 2,
                            ISO = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 3,
                            ISO = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 4,
                            ISO = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 5,
                            ISO = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 6,
                            ISO = "UK",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 7,
                            ISO = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 8,
                            ISO = "DE",
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserFriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserFriendId");

                    b.HasIndex("UserId");

                    b.ToTable("Friends");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(4567),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(8757),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(8837),
                            IsDeleted = false,
                            UserFriendId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(8850),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(8876),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(8887),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(8895),
                            IsDeleted = false,
                            UserFriendId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(8904),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd")
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(8915),
                            IsDeleted = false,
                            UserFriendId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(8996),
                            IsDeleted = false,
                            UserFriendId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a")
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(9007),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(9015),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(9022),
                            IsDeleted = false,
                            UserFriendId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(9030),
                            IsDeleted = false,
                            UserFriendId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd")
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(9037),
                            IsDeleted = false,
                            UserFriendId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 972, DateTimeKind.Utc).AddTicks(9045),
                            IsDeleted = false,
                            UserFriendId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 973, DateTimeKind.Utc).AddTicks(2158),
                            IsDeleted = false,
                            ReceiverId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            SenderId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 973, DateTimeKind.Utc).AddTicks(4846),
                            IsDeleted = false,
                            ReceiverId = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            SenderId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 973, DateTimeKind.Utc).AddTicks(4929),
                            IsDeleted = false,
                            ReceiverId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            SenderId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196")
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 973, DateTimeKind.Utc).AddTicks(4940),
                            IsDeleted = false,
                            ReceiverId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            SenderId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6")
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 973, DateTimeKind.Utc).AddTicks(4957),
                            IsDeleted = false,
                            ReceiverId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            SenderId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 973, DateTimeKind.Utc).AddTicks(4964),
                            IsDeleted = false,
                            ReceiverId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            SenderId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5")
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 973, DateTimeKind.Utc).AddTicks(4971),
                            IsDeleted = false,
                            ReceiverId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            SenderId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196")
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 973, DateTimeKind.Utc).AddTicks(4979),
                            IsDeleted = false,
                            ReceiverId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            SenderId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 976, DateTimeKind.Utc).AddTicks(4601),
                            IsDeleted = false,
                            PostId = 1,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619")
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(7386),
                            IsDeleted = false,
                            PostId = 1,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/magi_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(9549),
                            IsDeleted = false,
                            PostId = 2,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/ali_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(9630),
                            IsDeleted = false,
                            PostId = 3,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/telerik_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(9634),
                            IsDeleted = false,
                            PostId = 4,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/viktor_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(9643),
                            IsDeleted = false,
                            PostId = 5,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/silvia_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(9645),
                            IsDeleted = false,
                            PostId = 6,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/alexandra_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(9647),
                            IsDeleted = false,
                            PostId = 7,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(9649),
                            IsDeleted = false,
                            PostId = 8,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/pablo_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(9654),
                            IsDeleted = false,
                            PostId = 9,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(9656),
                            IsDeleted = false,
                            PostId = 10,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(9658),
                            IsDeleted = false,
                            PostId = 11,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(9660),
                            IsDeleted = false,
                            PostId = 12,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(9662),
                            IsDeleted = false,
                            PostId = 13,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(9665),
                            IsDeleted = false,
                            PostId = 14,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(9682),
                            IsDeleted = false,
                            PostId = 15,
                            Url = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId")
                        .IsUnique()
                        .HasFilter("[VideoId] IS NOT NULL");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(855),
                            IsDeleted = false,
                            PhotoId = 1,
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 2,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(4986),
                            IsDeleted = false,
                            PhotoId = 2,
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 3,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(5062),
                            IsDeleted = false,
                            PhotoId = 3,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 4,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(5071),
                            IsDeleted = false,
                            PhotoId = 4,
                            UserId = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 5,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(5086),
                            IsDeleted = false,
                            PhotoId = 5,
                            UserId = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 6,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(5095),
                            IsDeleted = false,
                            PhotoId = 6,
                            UserId = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 7,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(5102),
                            IsDeleted = false,
                            PhotoId = 7,
                            UserId = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 8,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(5109),
                            IsDeleted = false,
                            PhotoId = 8,
                            UserId = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 9,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(5118),
                            IsDeleted = false,
                            PhotoId = 9,
                            UserId = new Guid("d93d2d61-e0ce-4a8d-9d61-93c8bc2849d7"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 10,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(5126),
                            IsDeleted = false,
                            PhotoId = 10,
                            UserId = new Guid("5acf2b77-ab0a-4a04-8a5a-9ec38ffab96b"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 11,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(5132),
                            IsDeleted = false,
                            PhotoId = 11,
                            UserId = new Guid("6405b148-f626-4142-a342-0ccd2c82c30f"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 12,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(5140),
                            IsDeleted = false,
                            PhotoId = 12,
                            UserId = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 13,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(5148),
                            IsDeleted = false,
                            PhotoId = 13,
                            UserId = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 14,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(5155),
                            IsDeleted = false,
                            PhotoId = 14,
                            UserId = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 15,
                            Content = "My new profile photo:",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(5162),
                            IsDeleted = false,
                            PhotoId = 15,
                            UserId = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            Visibility = 0
                        },
                        new
                        {
                            Id = 20,
                            Content = "Really funny video :)",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 975, DateTimeKind.Utc).AddTicks(5170),
                            IsDeleted = false,
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            VideoId = 1,
                            Visibility = 0
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442143"),
                            ConcurrencyStamp = "c8e14b63-6f00-41dd-9d9b-1e80f9f775e5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("07cc27fe-9ca9-4953-9a79-2c79c1e32aff"),
                            ConcurrencyStamp = "e88629a0-8987-4e7d-b8a1-c167c3e02672",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SocialMedias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 976, DateTimeKind.Utc).AddTicks(7956),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "Instagram",
                            UserId = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            UserLink = "https://www.instagram.com/magisnikolova"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 977, DateTimeKind.Utc).AddTicks(1568),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "LinkedIn",
                            UserId = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            UserLink = "https://www.linkedin.com/in/ali-marekov/"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 977, DateTimeKind.Utc).AddTicks(1638),
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "Official website",
                            UserId = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            UserLink = "https://www.telerikacademy.com/"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Sofia"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CoverPictureId")
                        .HasColumnType("int");

                    b.Property<string>("CoverPictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfilePictureId")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TownId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d6e3bae-451f-4c01-8b43-cecc2d404270"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6266bef7-1c09-41f5-a02d-caba29749749",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 830, DateTimeKind.Utc).AddTicks(1929),
                            DateOfBirth = new DateTime(1997, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Magi Nikolova",
                            Education = "Sofia University",
                            Email = "magi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAGI@MAIL.COM",
                            NormalizedUserName = "MAGI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEGcGaA4zCbMCrhKNPBxWOfOr0jiYeLwwAsA/yl3PiJ+bAkITDjovDpScXYdTubKKQ==",
                            PhoneNumber = "0886868686",
                            PhoneNumberConfirmed = false,
                            ProfilePictureId = 1,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/magi_profile_pic.jpg",
                            SecurityStamp = "53a964e4-450e-4c06-9f13-b18509f241bb",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "magi@mail.com"
                        },
                        new
                        {
                            Id = new Guid("3be6b2ff-021d-4da5-8639-31973b594cc5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9b7f531-9196-46d5-9fae-8d80980ffed9",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 831, DateTimeKind.Utc).AddTicks(3525),
                            DateOfBirth = new DateTime(1999, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Ali Marekov",
                            Education = "Technical University",
                            Email = "ali@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@MAIL.COM",
                            NormalizedUserName = "ALI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO10bKc4LXcvyF6+dKzvJmLBcDrLHE+4Kcg1ovA5cAdmnfjjvzcWPDr1B7AVUbPYLA==",
                            PhoneNumber = "088686843",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/ali_profile_pic.jpg",
                            SecurityStamp = "bc033675-ea9c-45c9-8a48-cefa6426a25c",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "ali@mail.com"
                        },
                        new
                        {
                            Id = new Guid("3753d26b-5a35-491f-ae82-5238d243b619"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddfcbe8a-ff4e-4b52-9c70-0cb953378498",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 831, DateTimeKind.Utc).AddTicks(3630),
                            DateOfBirth = new DateTime(2010, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Telerik Academy",
                            Education = "Telerik Academy",
                            Email = "telerik@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TELERIK@MAIL.COM",
                            NormalizedUserName = "TELERIK@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBZjtO81n5vYTJjibH16a73v+e18FvL8CqxF4MdVvq9E6wyt+0BBDxgXSTTxwvKUMQ==",
                            PhoneNumber = "081111111",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/telerik_profile_pic.jpg",
                            SecurityStamp = "8539bfe4-9dc8-46cd-9e08-dac13af765ce",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "telerik@mail.com"
                        },
                        new
                        {
                            Id = new Guid("dc6788da-53ae-44e7-b53c-e53a2f77a1af"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13123e75-2f25-47b0-bc11-1ecf8d665aa0",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 831, DateTimeKind.Utc).AddTicks(3656),
                            DateOfBirth = new DateTime(2010, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "C Sharp",
                            Education = "Alpha C# Track",
                            Email = "csharp@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CSHARP@MAIL.COM",
                            NormalizedUserName = "CSHARP@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJVnDV8WoY3B07qGMR5qm6JoevXP52R1zDHlrgGn58kmcSrlepRcJ2f/7GXEVuvNkg==",
                            PhoneNumber = "0833333333",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg",
                            SecurityStamp = "421b9b46-02e5-4a18-8095-d9f43eb3c118",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "csharp@mail.com"
                        },
                        new
                        {
                            Id = new Guid("71c88aa4-b6b6-45e8-9ea1-ba1912c1a845"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22199c3c-d46e-471e-9d15-9225d9d66d85",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 831, DateTimeKind.Utc).AddTicks(3770),
                            DateOfBirth = new DateTime(1996, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Viktor Ivanov",
                            Education = "Technical University",
                            Email = "viktor@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTOR@MAIL.COM",
                            NormalizedUserName = "VIKTOR@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENPs7XlyyBjB/Fbq5dWHQUrWTGKqFQ4qFom5p1DEQvHteB2puH0uiQDqtHoT6hgLGw==",
                            PhoneNumber = "0884444444",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/viktor_profile_pic.jpg",
                            SecurityStamp = "30fa5b9a-3749-4145-b817-7407d1d52bb7",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "viktor@mail.com"
                        },
                        new
                        {
                            Id = new Guid("0d852e3a-b977-438a-9c33-7679a6e7b4cd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee461c2a-e971-41a1-8ada-d447fef303ca",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 831, DateTimeKind.Utc).AddTicks(3803),
                            DateOfBirth = new DateTime(2000, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Silvia Borisova",
                            Education = "Sofia University",
                            Email = "silvia@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SILVIA@MAIL.COM",
                            NormalizedUserName = "SILVIA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN3Vs/TNvI7ngGhmXnILyjAwUypz/+KrG2o0CqRNci4W4/jXMqVbYtulAWVa3DXKfg==",
                            PhoneNumber = "088555555",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/silvia_profile_pic.jpg",
                            SecurityStamp = "3c8858c0-be60-44a5-85c1-72e07a7694df",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "silvia@mail.com"
                        },
                        new
                        {
                            Id = new Guid("b87071f5-b71c-45e1-91e7-6e85637ed10a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "156b044f-cf9d-4bf8-885d-1024a0d5fb16",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 831, DateTimeKind.Utc).AddTicks(3822),
                            DateOfBirth = new DateTime(1997, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Maria Petrova",
                            Education = "Sofia University",
                            Email = "maria@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA@MAIL.COM",
                            NormalizedUserName = "MARIA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGGVM2Xr9zucSJvTqbTAc9iqGbM2ncXt9b6XTn7QEbXIL/YjvES67RDlGekFYMFW4Q==",
                            PhoneNumber = "088666666",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/maria_profile_pic.jpg",
                            SecurityStamp = "dd002872-485a-4884-a7b1-710ad0730457",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "maria@mail.com"
                        },
                        new
                        {
                            Id = new Guid("5d7ccf05-3080-4a9e-90ca-a4fee33aa196"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a62e2b2-15a9-4b89-b299-13f186d47f4a",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 831, DateTimeKind.Utc).AddTicks(3839),
                            DateOfBirth = new DateTime(1996, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Pablo Georgiev",
                            Education = "Technical University",
                            Email = "pablo@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PABLO@MAIL.COM",
                            NormalizedUserName = "PABLO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECRx4vyVKpsUS7ze9G7gSTeKqD45lDVate2jH4FM9R6d7q3g3agMsPa/NkYaj6MBBQ==",
                            PhoneNumber = "087777777",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/pablo_profile_pic.jpg",
                            SecurityStamp = "305a8a72-0861-4cf0-b81f-573453437217",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "pablo@mail.com"
                        },
                        new
                        {
                            Id = new Guid("7f8793ff-03ab-458c-bc0e-ed4866a55b48"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7e8559f-3b85-4ac6-9a83-9b599640f993",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 831, DateTimeKind.Utc).AddTicks(3860),
                            DateOfBirth = new DateTime(1976, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Georgi Georgiev",
                            Education = "UNWE",
                            Email = "georgi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGI@MAIL.COM",
                            NormalizedUserName = "GEORGI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDq0Ew8WthMSNgG/BexLlaqnxUcnqK7LwGLYWgpcZeay7ThSukOo2SRti2NDFnluUQ==",
                            PhoneNumber = "0888888888",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg",
                            SecurityStamp = "1c78423e-b660-42dd-8231-f62a41215180",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "georgi@mail.com"
                        },
                        new
                        {
                            Id = new Guid("d6f66ad9-58c9-43d6-adf8-4adbc3a97d36"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bda41de7-31ad-4e06-8722-0383797b8b4f",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 831, DateTimeKind.Utc).AddTicks(3880),
                            DateOfBirth = new DateTime(1999, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Alexandra Kirova",
                            Education = "Sofia University",
                            Email = "alexandra@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDRA@MAIL.COM",
                            NormalizedUserName = "ALEXANDRA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENSJLfHkgNpkeYb9FCTyWcosLS1FeJRF6Noa7R34q2rP0PIwzhK8zGMf0p6Akrppgg==",
                            PhoneNumber = "088899989",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/alexandra_profile_pic.jpg",
                            SecurityStamp = "02c60b32-bcd0-4e10-8af1-3f105297e66f",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "alexandra@mail.com"
                        },
                        new
                        {
                            Id = new Guid("a9e49452-8ffd-460d-9998-8f662e36a2d6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f6d3cf1-3152-45b5-92bc-f7a38f376432",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 831, DateTimeKind.Utc).AddTicks(3898),
                            DateOfBirth = new DateTime(2000, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Stanislav Pulev",
                            Education = "UNWE",
                            Email = "stanisav@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STANISLAV@MAIL.COM",
                            NormalizedUserName = "STANISLAV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB7UlBZwd+m7bcQP+TmhLKPpsKdMtPOkFaoNcq9MJiOX7t5tqJSsw+mj3R19arrqAA==",
                            PhoneNumber = "088679446",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg",
                            SecurityStamp = "389a1087-6704-4b38-85a5-8fb41d91cc67",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "stanislav@mail.com"
                        },
                        new
                        {
                            Id = new Guid("35547a2a-8779-416b-9fc8-7aab34e883bd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9db0acc-7fa5-4f83-9bb4-cfeb5af9f55d",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 831, DateTimeKind.Utc).AddTicks(3913),
                            DateOfBirth = new DateTime(1999, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Nikol Peeva",
                            Education = "Sofia University",
                            Email = "nikol@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOL@MAIL.COM",
                            NormalizedUserName = "NIKOL@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKXAj+jDmj+TzF3tZzOeS/p4bVD55+ba6v5xpG9mA7A0PwPrchI93vOIlZEuUTgShw==",
                            PhoneNumber = "08868324",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg",
                            SecurityStamp = "e69941a2-9c01-4cec-9ac9-d12754225561",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "nikol@mail.com"
                        },
                        new
                        {
                            Id = new Guid("d93d2d61-e0ce-4a8d-9d61-93c8bc2849d7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cb04881-bbb5-492b-8dcd-673861151482",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 831, DateTimeKind.Utc).AddTicks(4050),
                            DateOfBirth = new DateTime(1990, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Radko Stanev",
                            Education = "Telerik Academy",
                            Email = "radko@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RADKO@MAIL.COM",
                            NormalizedUserName = "RADKO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEByB/4iTfpuhlHIjWv1uQnQxzVoHB26zjNbXpwrw0b39IJxUON8M6v7MRzRcMfXuAQ==",
                            PhoneNumber = "545453423",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg",
                            SecurityStamp = "5d1502bb-cef8-4f33-89cc-8f45f16b4233",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "radko@mail.com"
                        },
                        new
                        {
                            Id = new Guid("5acf2b77-ab0a-4a04-8a5a-9ec38ffab96b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4db0a324-afcf-424a-872a-cb0e823962b0",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 831, DateTimeKind.Utc).AddTicks(4070),
                            DateOfBirth = new DateTime(1990, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Kiro Stanoev",
                            Education = "Telerik Academy",
                            Email = "kiro@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRO@MAIL.COM",
                            NormalizedUserName = "KIRO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPYSkD9xAkofXFsY+SYhCLCiXiQNalErz1hgeBeRV2rqFNaqlRVdadCYLUvxnh5Bkw==",
                            PhoneNumber = "5435345345",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg",
                            SecurityStamp = "45c1641b-8d41-4e37-a03d-def9469f0c1d",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "kiro@mail.com"
                        },
                        new
                        {
                            Id = new Guid("6405b148-f626-4142-a342-0ccd2c82c30f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de965fa4-0fcf-44ce-b73b-fbf82fb335db",
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 831, DateTimeKind.Utc).AddTicks(4086),
                            DateOfBirth = new DateTime(1990, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Bobi Hadzhiev",
                            Education = "Telerik Academy",
                            Email = "bobi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBI@MAIL.COM",
                            NormalizedUserName = "BOBI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMR2nJzekzAuAqMnI/PqZ7b03BJCrnqcTR2ACNOkFN01Wg/IcPkKtU4TcrpmwUPxew==",
                            PhoneNumber = "653534564",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://socialnetworkstorage.blob.core.windows.net/filescontainers/no_avatar.jpg",
                            SecurityStamp = "0bcc7b3a-cfb4-4aba-a6d9-06e944a783be",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "bobi@mail.com"
                        });
                });

            modelBuilder.Entity("SocialNetwork.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("Videos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 11, 18, 14, 50, 25, 976, DateTimeKind.Utc).AddTicks(1110),
                            IsDeleted = false,
                            PostId = 20,
                            Url = "NONONONO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Comment", b =>
                {
                    b.HasOne("SocialNetwork.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Friend", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "UserFriend")
                        .WithMany("FriendsOf")
                        .HasForeignKey("UserFriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.FriendRequest", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "Receiver")
                        .WithMany("FriendRequestsOf")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "Sender")
                        .WithMany("FriendRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Like", b =>
                {
                    b.HasOne("SocialNetwork.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Post", b =>
                {
                    b.HasOne("SocialNetwork.Models.Photo", "Photo")
                        .WithOne("Post")
                        .HasForeignKey("SocialNetwork.Models.Post", "PhotoId");

                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Models.Video", "Video")
                        .WithOne("Post")
                        .HasForeignKey("SocialNetwork.Models.Post", "VideoId");
                });

            modelBuilder.Entity("SocialNetwork.Models.SocialMedia", b =>
                {
                    b.HasOne("SocialNetwork.Models.User", "User")
                        .WithMany("SocialMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.Town", b =>
                {
                    b.HasOne("SocialNetwork.Models.Country", "Country")
                        .WithMany("Towns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.Models.User", b =>
                {
                    b.HasOne("SocialNetwork.Models.Town", "Town")
                        .WithMany("Users")
                        .HasForeignKey("TownId");
                });
#pragma warning restore 612, 618
        }
    }
}
